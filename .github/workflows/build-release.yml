name: Build and release

on:
  push:
    branches: [trunk]

jobs:
  build:
    name: Build
    runs-on: elvia-runner
    outputs:
      version-tag: ${{ steps.get-version.outputs.version_tag }}
      major-version-tag: ${{ steps.get-version.outputs.major_version_tag }}
    strategy:
      matrix:
        os: [linux, macos, windows]
        arch: [amd64]
        include:
        - os: macos
          arch: arm64
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve version
        id: get-version
        run: |
          version=$(cat VERSION)
          echo "VERSION_TAG=v$version" >> "$GITHUB_OUTPUT"
          echo "MAJOR_VERSION_TAG=v$(echo $version | cut -d. -f1)" >> "$GITHUB_OUTPUT"

      - name: Package CLI
        run: make package-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: '3lv-${{ matrix.os }}-${{ matrix.arch }}'
          path: '/tmp/3lv/dist'

  release:
    name: Release
    needs: [build]
    runs-on: elvia-runner
    if: ${{ github.event_name == 'push' }}
    outputs:
      new-version: ${{ steps.create-release.outputs.new_version }}
    env:
      VERSION_TAG: ${{ needs.build.outputs.version-tag }}
      MAJOR_VERSION_TAG: ${{ needs.build.outputs.major-version-tag }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create release if new version
        id: create-release
        run: |
          latest_version=$(gh release list --json name,isLatest -q '.[] | select(.isLatest == true) | .name')
          if [[ "$latest_version" == "$VERSION_TAG" ]]; then
            echo "Version already released."
            echo 'new_version=false' >> "$GITHUB_OUTPUT"
            exit 0
          fi

          gh release create "$VERSION_TAG" --generate-notes
          echo 'new_version=true' >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Override old major tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git fetch --tags
          git tag "$MAJOR_VERSION_TAG" "$VERSION_TAG" -f
          git push --tags -f

  upload-binaries:
    name: Upload binaries
    needs: [build, release]
    runs-on: elvia-runner
    if: ${{ github.event_name == 'push' }}
    strategy:
      matrix:
        os: [linux, macos, windows]
        arch: [amd64]
        include:
        - os: macos
          arch: arm64
      fail-fast: false
    env:
      VERSION_TAG: ${{ needs.build.outputs.version-tag }}
      NEW_VERSION: ${{ needs.release.outputs.new-version }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: '3lv-${{ matrix.os }}-${{ matrix.arch }}'

      - name: Upload binaries
        run: |
          if [[ "$NEW_VERSION" == 'false' ]]; then
            echo "No new version to upload."
            exit 0
          elif [[ "$NEW_VERSION" == 'true' ]]; then
            # Workaround for macOS binaries being named differently from their architecture (darwin)
            if [[ '${{ matrix.os }}' == 'macos' ]]; then
              mv '3lv-darwin-${{ matrix.arch }}.tar.gz' '3lv-macos-${{ matrix.arch }}.tar.gz'
              mv '3lv-darwin-${{ matrix.arch }}.tar.gz.md5' '3lv-macos-${{ matrix.arch }}.tar.gz.md5'
            fi

            gh release upload "$VERSION_TAG" '3lv-${{ matrix.os }}-${{ matrix.arch }}.tar.gz'
            gh release upload "$VERSION_TAG" '3lv-${{ matrix.os }}-${{ matrix.arch }}.tar.gz.md5'
          else
            echo "Unknown state."
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Cleanup if uploading binaries failed
        if: failure()
        run: gh release delete "$VERSION_TAG" --yes --cleanup-tag
